/**************************************************
* Class: SurveySelfAssessmentReportContoller
* Author: Soljit - SR
* Date: 2018-08-24
* 
* Description: This controller generates report based on the scores generated by SurveyTakePage. 
*
* V1.0: Initial
* 
****************************************************/

global with sharing class SurveySelfAssessmentReportContoller {
	public Decimal access {get;set;}
	public Decimal integration {get;set;}
	public Decimal automation {get; set;}
	public Decimal trackingOfInformtion {get; set;}
	public Decimal tasksAndProjectManagement {get;set;}
    public Decimal reports {get;set;}
    public List<Survey_Assessment__c> surveyAssessment{get;set;}
    public List<ReportDataWrapperClass> reportData{get;set;}
    public Decimal overall {get;set;}
    public Decimal sales {get;set;}
    public Decimal customerService {get;set;}
    public Decimal accounting {get;set;}
    public Decimal hr {get;set;}
    public Decimal documentManagement {get;set;}
    public Decimal marketing {get;set;}
    public String overallDesc{get;set;}
    public String salesDesc{get;set;}
    public String customerServiceDesc{get;set;}
    public String accountingDesc{get;set;}
    public String hrDesc{get;set;}
    public String documentManagementDesc{get;set;}
    public String marketingDesc{get;set;}
    public String overallTitle{get;set;}
    public String productivityGain {get;set;}
    public Map<String,List<ReportDataWrapperClass>> categoryToDataMapping{get;set;}
    public String language {get;set;}
    public String zeroTo19 {get;set;}
    public String twentyTo39 {get;set;}
    public string fourtyTo59 {get;set;}
    public string sixtyTo79 {get;set;}
    public string overAllColor {get;set;}
    
    /*********************************************************************************************
     * 
     * 
     * 
     **********************************************************************************************/
	public SurveySelfAssessmentReportContoller() {
		access = 25;
		integration = 50;
		automation = 55;
		trackingOfInformtion = 56;
		tasksAndProjectManagement = 75;
        reports = 33;
        overall = 18;
        productivityGain = '0';
        productivityGain = ApexPages.currentPage().getParameters().get('ProductivityGain');
        System.debug('productivityGain ******' + productivityGain);
        zeroTo19 = '#bb1574';
        twentyTo39 = '#ed7d31';
        fourtyTo59 = '#60a8ea';
        sixtyTo79 = '#3677FF';
        overAllColor = '';

        language = Apexpages.currentPage().getParameters().get('ln');
        if(String.isBlank(language)){
            language = 'en';
        }
        /*sales = 30;
        customerService = 20;
        accounting = 25;
        hr = 5;
        documentManagement = 30;
        marketing = 15;*/	

        String salesParam = ApexPages.currentPage().getParameters().get('Sales');
        String customerServiceParam = ApexPages.currentPage().getParameters().get('Customer Service');
        String accountingParam = ApexPages.currentPage().getParameters().get('Accounting');
        String hrParam = ApexPages.currentPage().getParameters().get('HR');
        String documentManagementParam = ApexPages.currentPage().getParameters().get('Document Management');
        String marketingParam = ApexPages.currentPage().getParameters().get('Marketing');
        String overallParam = ApexPages.currentPage().getParameters().get('Overall');
        String accessParam = ApexPages.currentPage().getParameters().get('Access');
        String integrationParam = ApexPages.currentPage().getParameters().get('Integration');
        String automationParam = ApexPages.currentPage().getParameters().get('Automation');
        String trackingOfInformtionParam = ApexPages.currentPage().getParameters().get('Tracking');
        String tasksAndProjectManagementParam = ApexPages.currentPage().getParameters().get('TASKSandPM');
        String reportsParam = ApexPages.currentPage().getParameters().get('Reports');
        sales = String.isBlank(salesParam) ? null : Integer.valueOf(salesParam);
        customerService =  String.isBlank(customerServiceParam) ? null : Integer.valueOf(customerServiceParam);
        accounting =  String.isBlank(accountingParam) ? null : Integer.valueOf(accountingParam);
        hr =  String.isBlank(hrParam) ? null : Integer.valueOf(hrParam);
        documentManagement =String.isBlank(documentManagementParam) ? null :  Integer.valueOf( documentManagementParam);
        marketing = String.isBlank(marketingParam) ? null : Integer.valueOf( marketingParam);
        overall = String.isBlank(overallParam) ? null : Integer.valueOf( overallParam);
        access = String.isBlank(accessParam) ? 0 : Integer.valueOf( accessParam);
        integration = String.isBlank(integrationParam) ? 0 : Integer.valueOf( integrationParam);
        automation = String.isBlank(automationParam) ? 0 : Integer.valueOf( automationParam);
        trackingOfInformtion = String.isBlank(trackingOfInformtionParam) ? 0 : Integer.valueOf( trackingOfInformtionParam);
        tasksAndProjectManagement = String.isBlank(tasksAndProjectManagementParam) ? 0 : Integer.valueOf( tasksAndProjectManagementParam);
        reports = String.isBlank(reportsParam) ? 0 : Integer.valueOf( reportsParam);

        surveyAssessment = new List<Survey_Assessment__c>([Select Id,Name,Category__c,Description__c,Title__c,Description_Fr__c, Title_Fr__c, 
                                                           Max__c,Min__c from Survey_Assessment__c]);
        system.debug('surveyAssessment****'+surveyAssessment);
        init();

        if(overall >=0 && overall <=19){
            overAllColor = zeroTo19;
        }
        else if(overall >=20 && overall <= 39){
            overAllColor = twentyTo39;
        }
        else if(overall >=40 && overall <= 59){
            overAllColor = fourtyTo59;
        }
        else if(overall >=60 && overall <= 79){
            overAllColor = fourtyTo59;
        }

        else{
            overAllColor = '#00b050';
        }
	}
    
    /*********************************************************************************************
     * 
     * 
     * 
     **********************************************************************************************/
    public void init(){
        List<ReportDataWrapperClass> reportData = new List<ReportDataWrapperClass>();
        
        for(Survey_Assessment__c s : surveyAssessment){
        ReportDataWrapperClass reportDataWrapper = new ReportDataWrapperClass(s.Min__c,
                                                                             s.Max__c,
                                                                             (language == 'en'? s.Description__c :s.Description_Fr__c),
                                                                             s.Category__c,
                                                                             (language == 'en'? s.Title__c :s.Title_Fr__c));
        reportData.add(reportDataWrapper);
        }
        categoryToDataMapping = new Map<String,List<ReportDataWrapperClass>>();
        for(ReportDataWrapperClass rdWrapper : reportData){
            if(categoryToDataMapping.containsKey(rdWrapper.category)){
                categoryToDataMapping.get(rdWrapper.category).add(rdWrapper);
            }
            else{
                List<ReportDataWrapperClass> rdWrapperList = new List<ReportDataWrapperClass>();
                rdWrapperList.add(rdWrapper);
                categoryToDataMapping.put(rdWrapper.category,rdWrapperList);
            }
        }
        overallDesc = getDescriptionForCategory('Overall', overall);
        system.debug('overallDesc***'+overallDesc);
        overallTitle = getTitleForCategory('Overall', overall);
		salesDesc = getDescriptionForCategory('Sales', sales);
        customerServiceDesc = getDescriptionForCategory('Customer Service', customerService);
        accountingDesc = getDescriptionForCategory('Accounting', accounting);
        hrDesc = getDescriptionForCategory('HR', hr);
        documentManagementDesc = getDescriptionForCategory('Document Management', documentManagement);
        marketingDesc = getDescriptionForCategory('Marketing', marketing);
      }
    
    /*********************************************************************************************
     * 
     * 
     * 
     **********************************************************************************************/
    public String getDescriptionForCategory(String category,Decimal categoryValue){
        if(categoryValue == null){
            categoryValue = 0;
        }
        String categoryDesc = '';
        system.debug('categoryToDataMapping.get(category)**'+category);
        system.debug('categoryToDataMapping.get(category)**'+categoryToDataMapping);
        system.debug('categoryToDataMapping.get(category)**'+categoryToDataMapping.get(category));
        List<ReportDataWrapperClass> allList = categoryToDataMapping.get(category);
        for(ReportDataWrapperClass allRD: allList){
            if(categoryValue >= allRD.minPercent && categoryValue <= allRD.maxPercent){
                categoryDesc = allRD.description;
            }   
        }
        system.debug('categoryDesc***'+categoryDesc);
        return categoryDesc;
    }
    
    /*********************************************************************************************
     * 
     * 
     * 
     **********************************************************************************************/
    public String getTitleForCategory(String category,Decimal categoryValue){
        String categoryTitle = '';
        system.debug('categoryToDataMapping.get(category)**'+categoryToDataMapping.get(category));
        List<ReportDataWrapperClass> allList = categoryToDataMapping.get(category);
        for(ReportDataWrapperClass allRD: allList){
            if(categoryValue >= allRD.minPercent && categoryValue <= allRD.maxPercent){
                categoryTitle = allRD.title;
            }   
        }
        system.debug('categoryTitle***'+categoryTitle);
        return categoryTitle;
    }
    
    /***********************************************************************************************
     * 
     * 
     * 
     **********************************************************************************************/
    public class ReportDataWrapperClass {
        public Decimal minPercent{get;set;}
        public Decimal maxPercent{get;set;}
        public String description{get;set;}
        public String category{get;set;}
        public String title{get;set;}
        
        public ReportDataWrapperClass(Decimal minPercent, Decimal maxPercent, String description, String category, String title){
            this.minPercent = minPercent;
            this.maxPercent= maxPercent;
            this.description = description;
            this.category = category;
            this.title = title;
        }
    }
}